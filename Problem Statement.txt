#include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <ctype.h>
 #define MAX_LINE 256
 #define MIN_PASSWORD_LENGTH 8
 // Function to evaluate password strength
 int evaluate_password_strength(const char *password) {
 int length = strlen(password);
 int has_upper = 0, has_lower = 0, has_digit = 0, has_special = 0;
 for (int i = 0; i < length; i++) {
 if (isupper(password[i])) has_upper = 1;
 else if (islower(password[i])) has_lower = 1;
 else if (isdigit(password[i])) has_digit = 1;
 else has_special = 1;
 }
 if (length >= MIN_PASSWORD_LENGTH && has_upper && has_lower && has_digit && 
has_special)
 return 3; // Strong
 if (length >= MIN_PASSWORD_LENGTH && ((has_upper && has_lower) || (has_digit && 
has_special)))
return 2; // Medium
 return 1; // Weak
 }
 // Function to read credentials and evaluate password strength
 void analyze_credentials(const char *filename) {
 FILE *file = fopen(filename, "r");
 if (!file) {
 perror("Error opening credentials file");
 return;
 }
 char line[MAX_LINE];
 printf("Compromised Credentials:\n");
 while (fgets(line, sizeof(line), file)) {
 char username[MAX_LINE], password[MAX_LINE], business_info[MAX_LINE];
 sscanf(line, "%[^,], %[^,], %[^"]", username, password, business_info);
 int strength = evaluate_password_strength(password);
 const char *strength_str = (strength == 3) ? "Strong" : (strength == 2) ? "Medium" : "Weak";
 printf("Username: %s, Password: %s, Strength: %s, Business Info: %s\n", username, 
password, strength_str, business_info);
 }
 fclose(file);
 }
// Function to simulate a phishing attack
 void simulate_phishing() {
 const char *fake_emails[] = {
 "Dear user, your account has been compromised. Click here to reset your password.",
 "Your subscription is about to expire. Update your billing information now!",
 "Suspicious activity detected! Verify your account immediately."
 };
 printf("\nPhishing Email Simulations:\n");
 for (int i = 0; i < 3; i++) {
 printf("Email %d: %s\n", i + 1, fake_emails[i]);
 }
 }
 // Function to analyze network vulnerabilities
 void analyze_network_security(const char *filename) {
 FILE *file = fopen(filename, "r");
 if (!file) {
 perror("Error opening network devices file");
 return;
 }
 char line[MAX_LINE];
 printf("\nNetwork Security Vulnerabilities:\n");
 while (fgets(line, sizeof(line), file)) {
char device[MAX_LINE], vulnerability[MAX_LINE];
 sscanf(line, "%[^,], %[^"]", device, vulnerability);
 printf("Device: %s, Vulnerability: %s\n", device, vulnerability);
 }
 fclose(file);
 }
 int main() {
 printf("Cloudstrike Breach Simulation\n============================\n");
 analyze_credentials("credentials.txt");
 simulate_phishing();
 analyze_network_security("network_devices.txt");
 return 0;
 }
